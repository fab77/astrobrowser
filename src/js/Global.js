"use strict";

import { Healpix } from "healpixjs";
import InsideSphereSelectionChangedEvent from './events/InsideSphereSelectionChangedEvent.js';
import eventBus from './events/EventBus.js';

// import HiPS from './model/hips/HiPS.js';
import HiPS from './model/hipsnew/HiPS.js';
import HiPSDescriptor from "./model/HiPSDescriptor.js";

import config from './config.json';

import {addHiPS} from './repos/HiPSNodeRepo.js'

class Global {

	_pMatrix;	// projection matrix (perspective)
	_mvMatrix;	// TODO model view matrix ? needed?
	_model;		// selected object
	_camera;		// the camera object
	_gl;			// GL context
	_rayPicker;	// TODO probably useless here ince all methods are static
	_hipsStack;
	_baseUrl;
	_selectionnside;
	_healpix4footprints;
	_showConvexPolygons; // used in FPCatalogue to drawing convex polygons together with the original footprints (for debug)
	_defaultHips;
	_blendMode
	HIPS_REF_ORDER;

	constructor() {

		this.HIPS_REF_ORDER = 6;
		this._TAPProviders = config.tapProviders
		this._HiPSNodes = config.hipsNodes
		this._useCORSProxy = config.useCORSProxy
		this._corsProxyUrl=config.corsProxyUrl
		this._maxDecimals= config.maxDecimals
		this._defaultHipsUrl = config.defaultHipsUrl
		this._debug = config.debug;
		this._insideSphere = config.insideView;
		this._version = config.version

		this._pMatrix = null;
		this._mvMatrix = null;
		this._model = null;
		this._camera = null;
		this._gl = null;
		this._rayPicker = null;
		this._healpix = [];
		this._order = 3;
		
		this._selectionnside = 32;
		this._baseUrl = "http://skyint.esac.esa.int/esasky-tap/";
		this._healpix4footprints = false;
		this._showConvexPolygons = false; // used in FPCatalogue to drawing convex polygons together with the original footprints (for debug)
		this._showPointsInPolygons = false;
		this._defaultHips = null;
		this._blendMode = false;
		
		// this._insideSphere = false;
		// this._maxDecimals = 15;
		// this._useCORSProxy = true;
		// this._corsProxyUrl = "http://localhost:3000";
	}

	get version(){
		return this._version
	}

	set corsProxyUrl(url) {
		this._corsProxyUrl = url;
	}

	get corsProxyUrl() {
		return this._corsProxyUrl;
	}
	get useCORSProxy(){
		return this._useCORSProxy;
	}

	set useCORSProxy(enabled){
		this._useCORSProxy = enabled;
	}

	get debug() {
		return this._debug;
	}

	getTAPProviders() {
		return this._TAPProviders;
	}

	setSelectedHiPS(hips) {
		this._selectedHiPS = hips;
	}

	getSelectedHiPS() {
		return this._selectedHiPS;
	}

	getHealpix(order) {
		if (this._healpix[order] == undefined) {
			this._healpix[order] = new Healpix(Math.pow(2, order));
		}
		return this._healpix[order];
	}

	get MAX_DECIMALS() {
		return this._maxDecimals;
	}

	get pMatrix() {
		return this._pMatrix;
	}
	// IS IT USED?!?
	get mvMatrix() {
		return this._mvMatrix;
	}

	get model() {
		return this._model;
	}

	get camera() {
		return this._camera;
	}

	get gl() {
		return this._gl;
	}

	get rayPicker() {
		return this._rayPicker;
	}

	set pMatrix(in_pMatrix) {
		this._pMatrix = in_pMatrix;
	}
	// TODO
	set mvMatrix(in_mvMatrix) {
		this._mvMatrix = in_mvMatrix;
	}

	set model(in_model) {
		this._model = in_model;
	}

	set camera(in_camera) {
		this._camera = in_camera;
	}

	set gl(in_gl) {
		this._gl = in_gl;
	}
	// TODO
	set rayPicker(in_rayPicker) {
		this._rayPicker = in_rayPicker;
	}


	set order(in_order) {
		this._order = in_order;
	}

	get order() {
		return this._order;
	}

	set insideSphere(in_insideSphere) {
		this._insideSphere = in_insideSphere;
		eventBus.fireEvent(new InsideSphereSelectionChangedEvent(in_insideSphere));
	}

	get insideSphere() {
		return this._insideSphere;
	}

	get baseUrl() {
		return this._baseUrl;
	}

	get nsideForSelection() {
		return this._selectionnside;
	}

	get healpix4footprints() {
		return this._healpix4footprints;
	}

	get showConvexPolygons() {
		return this._showConvexPolygons;
	}

	get showPointsInPolygons() {
		return this._showPointsInPolygons;
	}



	get defaultHips() {

		// TODO move the HiPS initialization into HiPSPresenter and leave here only the name of the HiPS
		if (this._defaultHips == null) {

			// let desc = new HiPSDescriptor("creator_did          = ivo://CDS/P/DSS2/color \n" +
			// 	"obs_collection       = DSS colored \n" +
			// 	"obs_title            = DSS colored \n" +
			// 	"obs_description      = Color composition generated by CDS. This HiPS survey is based on 2 others HiPS surveys, respectively DSS2-red and DSS2-blue HiPS, both of them directly generated from original scanned plates downloaded from STScI site. The red component has been built from POSS-II F, AAO-SES,SR and SERC-ER plates. The blue component has been build from POSS-II J and SERC-J,EJ. The green component is based on the mean of other components. Three missing plates from red survey (253, 260, 359) has been replaced by pixels from the DSSColor STScI jpeg survey. The 11 missing blue plates (mainly in galactic plane) have not been replaced (only red component). \n" +
			// 	"obs_copyright        = Digitized Sky Survey - STScI/NASA, Colored & Healpixed by CDS \n" +
			// 	"obs_copyright_url    = http://archive.stsci.edu/dss/copyright.html \n" +
			// 	"client_category      = Image/Optical/DSS \n" +
			// 	"client_sort_key      = 03-00 \n" +
			// 	"hips_builder         = Aladin/HipsGen v10.123 \n" +
			// 	"hips_creation_date   = 2010-05-01T19:05Z \n" +
			// 	"hips_release_date    = 2019-05-07T10:55Z \n" +
			// 	"hips_creator         = CDS (A.Oberto, P.Fernique) \n" +
			// 	"hips_version         = 1.4 \n" +
			// 	"hips_order           = 9 \n" +
			// 	"hips_frame           = equatorial \n" +
			// 	"hips_tile_width      = 512 \n" +
			// 	"hips_tile_format     = jpeg \n" +
			// 	"dataproduct_type     = image \n" +
			// 	"client_application   = AladinLite \n" +
			// 	"hips_status          = public mirror unclonable \n" +
			// 	"hips_rgb_red         = DSS2Merged [1488.0 8488.8125 14666.0 Linear] \n" +
			// 	"hips_rgb_blue        = DSS2-blue-XJ-S [4286.0 12122.5 19959.0 Linear] \n" +
			// 	"hips_hierarchy       = median \n" +
			// 	"hips_pixel_scale     = 2.236E-4 \n" +
			// 	"hips_initial_ra      = 085.30251 \n" +
			// 	"hips_initial_dec     = -02.25468 \n" +
			// 	"hips_initial_fov     = 2 \n" +
			// 	"moc_sky_fraction     = 1 \n" +
			// 	"hips_copyright       = CNRS/Unistra \n" +
			// 	"obs_ack              = The Digitized Sky Surveys were produced at the Space Telescope Science Institute under U.S. Government grant NAG W-2166. The images of these surveys are based on photographic data obtained using the Oschin Schmidt Telescope on Palomar Mountain and the UK Schmidt Telescope. The plates were processed into the present compressed digital form with the permission of these institutions. The National Geographic Society - Palomar Observatory Sky Atlas (POSS-I) was made by the California Institute of Technology with grants from the National Geographic Society. The Second Palomar Observatory Sky Survey (POSS-II) was made by the California Institute of Technology with funds from the National Science Foundation, the National Geographic Society, the Sloan Foundation, the Samuel Oschin Foundation, and the Eastman Kodak Corporation. The Oschin Schmidt Telescope is operated by the California Institute of Technology and Palomar Observatory. The UK Schmidt Telescope was operated by the Royal Observatory Edinburgh, with funding from the UK Science and Engineering Research Council (later the UK Particle Physics and Astronomy Research Council), until 1988 June, and thereafter by the Anglo-Australian Observatory. The blue plates of the southern Sky Atlas and its Equatorial Extension (together known as the SERC-J), as well as the Equatorial Red (ER), and the Second Epoch [red] Survey (SES) were all taken with the UK Schmidt. Supplemental funding for sky-survey work at the ST ScI is provided by the European Southern Observatory. \n" +
			// 	"prov_progenitor      = STScI \n" +
			// 	"bib_reference        = 1996ASPC..101...88L \n" +
			// 	"bib_reference_url    = http://cdsads.u-strasbg.fr/abs/1996ASPC..101...88L \n" +
			// 	"# 1975-1999 \n" +
			// 	"t_min                = 42413 \n" +
			// 	"t_max                = 51179 \n" +
			// 	"obs_regime           = Optical \n" +
			// 	"em_min               = 4e-7 \n" +
			// 	"em_max               = 6e-7 \n" +
			// 	"#hips_master_url     = ex: http://yourHipsServer/null \n" +
			// 	"hips_order_min       = 0 \n" +
			// 	"dataproduct_subtype  = color \n" +
			// 	"hipsgen_date         = 2019-05-07T10:55Z \n" +
			// 	"hipsgen_params       = out=/asd-volumes/sc1-asd-volume8/DSS/DSSColor UPDATE", "https://skies.esac.esa.int/DSSColor/");

			// // this._defaultHips = new HiPS(1, [0.0, 0.0, 0.0], 0, 0, "DSS colored", "//skies.esac.esa.int/DSSColor/", "jpg", 9, false, desc);
			// this._defaultHips = new HiPS(1, [0.0, 0.0, 0.0], 0, 0, "DSS colored", this._defaultHipsUrl, "jpg", 9, false, desc);
			// this._defaultHips.refreshModel(180);
			// this._selectedHiPS = this._defaultHips;
			const self = this
			this._defaultHips = addHiPS("https://skies.esac.esa.int/DSSColor/").then((descriptor) => {
				// this._defaultHips = new HiPS(1, [0.0, 0.0, 0.0], 0, 0, "DSS colored", "//skies.esac.esa.int/DSSColor/", "jpg", 9, false, desc);
				self._defaultHips = new HiPS(1, [0.0, 0.0, 0.0], 0, 0, descriptor.surveyName, self._defaultHipsUrl, "jpg", descriptor.maxOrder, false, descriptor);
				self._defaultHips.refreshModel(180);
				self._selectedHiPS = self._defaultHips;	
				return this._defaultHips;
			});

			

		}
		return this._defaultHips;
	}

	get blendMode() {
		return this._blendMode;
	}

	set hipsFoV(fov) {
		this._hipsFoV = fov;
	}

	get hipsFoV() {
		return this._hipsFoV;
	}

	getConfig_cameraFovDeg(){
		return config.camera.fovDeg;
	}
	
	getConfig_nearPlane(){
		return config.camera.nearPlane;
	}

	getConfig_cameraFarPlane(){
		return config.camera.farPlane;
	}

}

var global = new Global();

export default global;